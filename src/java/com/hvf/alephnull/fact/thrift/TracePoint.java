/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hvf.alephnull.fact.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TracePoint implements org.apache.thrift.TBase<TracePoint, TracePoint._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TracePoint");

  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UTC_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("utc_ts", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TracePointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TracePointTupleSchemeFactory());
  }

  private String src; // required
  private String label; // required
  private long utc_ts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC((short)1, "src"),
    LABEL((short)2, "label"),
    UTC_TS((short)3, "utc_ts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC
          return SRC;
        case 2: // LABEL
          return LABEL;
        case 3: // UTC_TS
          return UTC_TS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UTC_TS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UTC_TS, new org.apache.thrift.meta_data.FieldMetaData("utc_ts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "MicroTimestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TracePoint.class, metaDataMap);
  }

  public TracePoint() {
  }

  public TracePoint(
    String src,
    String label,
    long utc_ts)
  {
    this();
    this.src = src;
    this.label = label;
    this.utc_ts = utc_ts;
    setUtc_tsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TracePoint(TracePoint other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSrc()) {
      this.src = other.src;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.utc_ts = other.utc_ts;
  }

  public TracePoint deepCopy() {
    return new TracePoint(this);
  }

  @Override
  public void clear() {
    this.src = null;
    this.label = null;
    setUtc_tsIsSet(false);
    this.utc_ts = 0;
  }

  public String getSrc() {
    return this.src;
  }

  public void setSrc(String src) {
    this.src = src;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public long getUtc_ts() {
    return this.utc_ts;
  }

  public void setUtc_ts(long utc_ts) {
    this.utc_ts = utc_ts;
    setUtc_tsIsSet(true);
  }

  public void unsetUtc_ts() {
    __isset_bit_vector.clear(__UTC_TS_ISSET_ID);
  }

  /** Returns true if field utc_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetUtc_ts() {
    return __isset_bit_vector.get(__UTC_TS_ISSET_ID);
  }

  public void setUtc_tsIsSet(boolean value) {
    __isset_bit_vector.set(__UTC_TS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case UTC_TS:
      if (value == null) {
        unsetUtc_ts();
      } else {
        setUtc_ts((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC:
      return getSrc();

    case LABEL:
      return getLabel();

    case UTC_TS:
      return Long.valueOf(getUtc_ts());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC:
      return isSetSrc();
    case LABEL:
      return isSetLabel();
    case UTC_TS:
      return isSetUtc_ts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TracePoint)
      return this.equals((TracePoint)that);
    return false;
  }

  public boolean equals(TracePoint that) {
    if (that == null)
      return false;

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_utc_ts = true;
    boolean that_present_utc_ts = true;
    if (this_present_utc_ts || that_present_utc_ts) {
      if (!(this_present_utc_ts && that_present_utc_ts))
        return false;
      if (this.utc_ts != that.utc_ts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_src = true && (isSetSrc());
    builder.append(present_src);
    if (present_src)
      builder.append(src);

    boolean present_label = true && (isSetLabel());
    builder.append(present_label);
    if (present_label)
      builder.append(label);

    boolean present_utc_ts = true;
    builder.append(present_utc_ts);
    if (present_utc_ts)
      builder.append(utc_ts);

    return builder.toHashCode();
  }

  public int compareTo(TracePoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TracePoint typedOther = (TracePoint)other;

    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(typedOther.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, typedOther.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(typedOther.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, typedOther.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtc_ts()).compareTo(typedOther.isSetUtc_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtc_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utc_ts, typedOther.utc_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TracePoint(");
    boolean first = true;

    sb.append("src:");
    if (this.src == null) {
      sb.append("null");
    } else {
      sb.append(this.src);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("utc_ts:");
    sb.append(this.utc_ts);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetSrc()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'src' is unset! Struct:" + toString());
    }

    if (!isSetLabel()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'label' is unset! Struct:" + toString());
    }

    if (!isSetUtc_ts()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'utc_ts' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TracePointStandardSchemeFactory implements SchemeFactory {
    public TracePointStandardScheme getScheme() {
      return new TracePointStandardScheme();
    }
  }

  private static class TracePointStandardScheme extends StandardScheme<TracePoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TracePoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.src = iprot.readString();
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UTC_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.utc_ts = iprot.readI64();
              struct.setUtc_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TracePoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.src != null) {
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeString(struct.src);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UTC_TS_FIELD_DESC);
      oprot.writeI64(struct.utc_ts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TracePointTupleSchemeFactory implements SchemeFactory {
    public TracePointTupleScheme getScheme() {
      return new TracePointTupleScheme();
    }
  }

  private static class TracePointTupleScheme extends TupleScheme<TracePoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TracePoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.src);
      oprot.writeString(struct.label);
      oprot.writeI64(struct.utc_ts);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TracePoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.src = iprot.readString();
      struct.setSrcIsSet(true);
      struct.label = iprot.readString();
      struct.setLabelIsSet(true);
      struct.utc_ts = iprot.readI64();
      struct.setUtc_tsIsSet(true);
    }
  }

}

