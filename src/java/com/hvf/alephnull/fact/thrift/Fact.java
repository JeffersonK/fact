/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hvf.alephnull.fact.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Fact implements org.apache.thrift.TBase<Fact, Fact._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Fact");

  private static final org.apache.thrift.protocol.TField DEVELOPER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("developer_key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("application_key", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField P_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_uuid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField P_LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("p_loc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField V_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("v_uuid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField V_LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("v_loc", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField UTC_TX_FIELD_DESC = new org.apache.thrift.protocol.TField("utc_tx", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField UTC_RX_FIELD_DESC = new org.apache.thrift.protocol.TField("utc_rx", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence_num", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ARGV_FIELD_DESC = new org.apache.thrift.protocol.TField("argv", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField D_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("d_context", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FactStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FactTupleSchemeFactory());
  }

  private String developer_key; // required
  private String application_key; // required
  private String p_uuid; // required
  private PhysicalLocation p_loc; // optional
  private String v_uuid; // optional
  private VirtualLocation v_loc; // optional
  private long utc_tx; // required
  private long utc_rx; // optional
  private int sequence_num; // required
  private Operation op; // required
  private List<String> argv; // required
  private DeviceContext d_context; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVELOPER_KEY((short)1, "developer_key"),
    APPLICATION_KEY((short)2, "application_key"),
    P_UUID((short)3, "p_uuid"),
    P_LOC((short)4, "p_loc"),
    V_UUID((short)5, "v_uuid"),
    V_LOC((short)6, "v_loc"),
    UTC_TX((short)7, "utc_tx"),
    UTC_RX((short)8, "utc_rx"),
    SEQUENCE_NUM((short)9, "sequence_num"),
    /**
     * 
     * @see Operation
     */
    OP((short)10, "op"),
    ARGV((short)11, "argv"),
    D_CONTEXT((short)12, "d_context");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVELOPER_KEY
          return DEVELOPER_KEY;
        case 2: // APPLICATION_KEY
          return APPLICATION_KEY;
        case 3: // P_UUID
          return P_UUID;
        case 4: // P_LOC
          return P_LOC;
        case 5: // V_UUID
          return V_UUID;
        case 6: // V_LOC
          return V_LOC;
        case 7: // UTC_TX
          return UTC_TX;
        case 8: // UTC_RX
          return UTC_RX;
        case 9: // SEQUENCE_NUM
          return SEQUENCE_NUM;
        case 10: // OP
          return OP;
        case 11: // ARGV
          return ARGV;
        case 12: // D_CONTEXT
          return D_CONTEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UTC_TX_ISSET_ID = 0;
  private static final int __UTC_RX_ISSET_ID = 1;
  private static final int __SEQUENCE_NUM_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.P_LOC,_Fields.V_UUID,_Fields.V_LOC,_Fields.UTC_RX,_Fields.D_CONTEXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVELOPER_KEY, new org.apache.thrift.meta_data.FieldMetaData("developer_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_KEY, new org.apache.thrift.meta_data.FieldMetaData("application_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P_UUID, new org.apache.thrift.meta_data.FieldMetaData("p_uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P_LOC, new org.apache.thrift.meta_data.FieldMetaData("p_loc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PhysicalLocation.class)));
    tmpMap.put(_Fields.V_UUID, new org.apache.thrift.meta_data.FieldMetaData("v_uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_LOC, new org.apache.thrift.meta_data.FieldMetaData("v_loc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VirtualLocation.class)));
    tmpMap.put(_Fields.UTC_TX, new org.apache.thrift.meta_data.FieldMetaData("utc_tx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "MicroTimestamp")));
    tmpMap.put(_Fields.UTC_RX, new org.apache.thrift.meta_data.FieldMetaData("utc_rx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "MicroTimestamp")));
    tmpMap.put(_Fields.SEQUENCE_NUM, new org.apache.thrift.meta_data.FieldMetaData("sequence_num", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operation.class)));
    tmpMap.put(_Fields.ARGV, new org.apache.thrift.meta_data.FieldMetaData("argv", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.D_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("d_context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceContext.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Fact.class, metaDataMap);
  }

  public Fact() {
  }

  public Fact(
    String developer_key,
    String application_key,
    String p_uuid,
    long utc_tx,
    int sequence_num,
    Operation op,
    List<String> argv)
  {
    this();
    this.developer_key = developer_key;
    this.application_key = application_key;
    this.p_uuid = p_uuid;
    this.utc_tx = utc_tx;
    setUtc_txIsSet(true);
    this.sequence_num = sequence_num;
    setSequence_numIsSet(true);
    this.op = op;
    this.argv = argv;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Fact(Fact other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDeveloper_key()) {
      this.developer_key = other.developer_key;
    }
    if (other.isSetApplication_key()) {
      this.application_key = other.application_key;
    }
    if (other.isSetP_uuid()) {
      this.p_uuid = other.p_uuid;
    }
    if (other.isSetP_loc()) {
      this.p_loc = new PhysicalLocation(other.p_loc);
    }
    if (other.isSetV_uuid()) {
      this.v_uuid = other.v_uuid;
    }
    if (other.isSetV_loc()) {
      this.v_loc = new VirtualLocation(other.v_loc);
    }
    this.utc_tx = other.utc_tx;
    this.utc_rx = other.utc_rx;
    this.sequence_num = other.sequence_num;
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetArgv()) {
      List<String> __this__argv = new ArrayList<String>();
      for (String other_element : other.argv) {
        __this__argv.add(other_element);
      }
      this.argv = __this__argv;
    }
    if (other.isSetD_context()) {
      this.d_context = new DeviceContext(other.d_context);
    }
  }

  public Fact deepCopy() {
    return new Fact(this);
  }

  @Override
  public void clear() {
    this.developer_key = null;
    this.application_key = null;
    this.p_uuid = null;
    this.p_loc = null;
    this.v_uuid = null;
    this.v_loc = null;
    setUtc_txIsSet(false);
    this.utc_tx = 0;
    setUtc_rxIsSet(false);
    this.utc_rx = 0;
    setSequence_numIsSet(false);
    this.sequence_num = 0;
    this.op = null;
    this.argv = null;
    this.d_context = null;
  }

  public String getDeveloper_key() {
    return this.developer_key;
  }

  public void setDeveloper_key(String developer_key) {
    this.developer_key = developer_key;
  }

  public void unsetDeveloper_key() {
    this.developer_key = null;
  }

  /** Returns true if field developer_key is set (has been assigned a value) and false otherwise */
  public boolean isSetDeveloper_key() {
    return this.developer_key != null;
  }

  public void setDeveloper_keyIsSet(boolean value) {
    if (!value) {
      this.developer_key = null;
    }
  }

  public String getApplication_key() {
    return this.application_key;
  }

  public void setApplication_key(String application_key) {
    this.application_key = application_key;
  }

  public void unsetApplication_key() {
    this.application_key = null;
  }

  /** Returns true if field application_key is set (has been assigned a value) and false otherwise */
  public boolean isSetApplication_key() {
    return this.application_key != null;
  }

  public void setApplication_keyIsSet(boolean value) {
    if (!value) {
      this.application_key = null;
    }
  }

  public String getP_uuid() {
    return this.p_uuid;
  }

  public void setP_uuid(String p_uuid) {
    this.p_uuid = p_uuid;
  }

  public void unsetP_uuid() {
    this.p_uuid = null;
  }

  /** Returns true if field p_uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetP_uuid() {
    return this.p_uuid != null;
  }

  public void setP_uuidIsSet(boolean value) {
    if (!value) {
      this.p_uuid = null;
    }
  }

  public PhysicalLocation getP_loc() {
    return this.p_loc;
  }

  public void setP_loc(PhysicalLocation p_loc) {
    this.p_loc = p_loc;
  }

  public void unsetP_loc() {
    this.p_loc = null;
  }

  /** Returns true if field p_loc is set (has been assigned a value) and false otherwise */
  public boolean isSetP_loc() {
    return this.p_loc != null;
  }

  public void setP_locIsSet(boolean value) {
    if (!value) {
      this.p_loc = null;
    }
  }

  public String getV_uuid() {
    return this.v_uuid;
  }

  public void setV_uuid(String v_uuid) {
    this.v_uuid = v_uuid;
  }

  public void unsetV_uuid() {
    this.v_uuid = null;
  }

  /** Returns true if field v_uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetV_uuid() {
    return this.v_uuid != null;
  }

  public void setV_uuidIsSet(boolean value) {
    if (!value) {
      this.v_uuid = null;
    }
  }

  public VirtualLocation getV_loc() {
    return this.v_loc;
  }

  public void setV_loc(VirtualLocation v_loc) {
    this.v_loc = v_loc;
  }

  public void unsetV_loc() {
    this.v_loc = null;
  }

  /** Returns true if field v_loc is set (has been assigned a value) and false otherwise */
  public boolean isSetV_loc() {
    return this.v_loc != null;
  }

  public void setV_locIsSet(boolean value) {
    if (!value) {
      this.v_loc = null;
    }
  }

  public long getUtc_tx() {
    return this.utc_tx;
  }

  public void setUtc_tx(long utc_tx) {
    this.utc_tx = utc_tx;
    setUtc_txIsSet(true);
  }

  public void unsetUtc_tx() {
    __isset_bit_vector.clear(__UTC_TX_ISSET_ID);
  }

  /** Returns true if field utc_tx is set (has been assigned a value) and false otherwise */
  public boolean isSetUtc_tx() {
    return __isset_bit_vector.get(__UTC_TX_ISSET_ID);
  }

  public void setUtc_txIsSet(boolean value) {
    __isset_bit_vector.set(__UTC_TX_ISSET_ID, value);
  }

  public long getUtc_rx() {
    return this.utc_rx;
  }

  public void setUtc_rx(long utc_rx) {
    this.utc_rx = utc_rx;
    setUtc_rxIsSet(true);
  }

  public void unsetUtc_rx() {
    __isset_bit_vector.clear(__UTC_RX_ISSET_ID);
  }

  /** Returns true if field utc_rx is set (has been assigned a value) and false otherwise */
  public boolean isSetUtc_rx() {
    return __isset_bit_vector.get(__UTC_RX_ISSET_ID);
  }

  public void setUtc_rxIsSet(boolean value) {
    __isset_bit_vector.set(__UTC_RX_ISSET_ID, value);
  }

  public int getSequence_num() {
    return this.sequence_num;
  }

  public void setSequence_num(int sequence_num) {
    this.sequence_num = sequence_num;
    setSequence_numIsSet(true);
  }

  public void unsetSequence_num() {
    __isset_bit_vector.clear(__SEQUENCE_NUM_ISSET_ID);
  }

  /** Returns true if field sequence_num is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence_num() {
    return __isset_bit_vector.get(__SEQUENCE_NUM_ISSET_ID);
  }

  public void setSequence_numIsSet(boolean value) {
    __isset_bit_vector.set(__SEQUENCE_NUM_ISSET_ID, value);
  }

  /**
   * 
   * @see Operation
   */
  public Operation getOp() {
    return this.op;
  }

  /**
   * 
   * @see Operation
   */
  public void setOp(Operation op) {
    this.op = op;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public int getArgvSize() {
    return (this.argv == null) ? 0 : this.argv.size();
  }

  public java.util.Iterator<String> getArgvIterator() {
    return (this.argv == null) ? null : this.argv.iterator();
  }

  public void addToArgv(String elem) {
    if (this.argv == null) {
      this.argv = new ArrayList<String>();
    }
    this.argv.add(elem);
  }

  public List<String> getArgv() {
    return this.argv;
  }

  public void setArgv(List<String> argv) {
    this.argv = argv;
  }

  public void unsetArgv() {
    this.argv = null;
  }

  /** Returns true if field argv is set (has been assigned a value) and false otherwise */
  public boolean isSetArgv() {
    return this.argv != null;
  }

  public void setArgvIsSet(boolean value) {
    if (!value) {
      this.argv = null;
    }
  }

  public DeviceContext getD_context() {
    return this.d_context;
  }

  public void setD_context(DeviceContext d_context) {
    this.d_context = d_context;
  }

  public void unsetD_context() {
    this.d_context = null;
  }

  /** Returns true if field d_context is set (has been assigned a value) and false otherwise */
  public boolean isSetD_context() {
    return this.d_context != null;
  }

  public void setD_contextIsSet(boolean value) {
    if (!value) {
      this.d_context = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVELOPER_KEY:
      if (value == null) {
        unsetDeveloper_key();
      } else {
        setDeveloper_key((String)value);
      }
      break;

    case APPLICATION_KEY:
      if (value == null) {
        unsetApplication_key();
      } else {
        setApplication_key((String)value);
      }
      break;

    case P_UUID:
      if (value == null) {
        unsetP_uuid();
      } else {
        setP_uuid((String)value);
      }
      break;

    case P_LOC:
      if (value == null) {
        unsetP_loc();
      } else {
        setP_loc((PhysicalLocation)value);
      }
      break;

    case V_UUID:
      if (value == null) {
        unsetV_uuid();
      } else {
        setV_uuid((String)value);
      }
      break;

    case V_LOC:
      if (value == null) {
        unsetV_loc();
      } else {
        setV_loc((VirtualLocation)value);
      }
      break;

    case UTC_TX:
      if (value == null) {
        unsetUtc_tx();
      } else {
        setUtc_tx((Long)value);
      }
      break;

    case UTC_RX:
      if (value == null) {
        unsetUtc_rx();
      } else {
        setUtc_rx((Long)value);
      }
      break;

    case SEQUENCE_NUM:
      if (value == null) {
        unsetSequence_num();
      } else {
        setSequence_num((Integer)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((Operation)value);
      }
      break;

    case ARGV:
      if (value == null) {
        unsetArgv();
      } else {
        setArgv((List<String>)value);
      }
      break;

    case D_CONTEXT:
      if (value == null) {
        unsetD_context();
      } else {
        setD_context((DeviceContext)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVELOPER_KEY:
      return getDeveloper_key();

    case APPLICATION_KEY:
      return getApplication_key();

    case P_UUID:
      return getP_uuid();

    case P_LOC:
      return getP_loc();

    case V_UUID:
      return getV_uuid();

    case V_LOC:
      return getV_loc();

    case UTC_TX:
      return Long.valueOf(getUtc_tx());

    case UTC_RX:
      return Long.valueOf(getUtc_rx());

    case SEQUENCE_NUM:
      return Integer.valueOf(getSequence_num());

    case OP:
      return getOp();

    case ARGV:
      return getArgv();

    case D_CONTEXT:
      return getD_context();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVELOPER_KEY:
      return isSetDeveloper_key();
    case APPLICATION_KEY:
      return isSetApplication_key();
    case P_UUID:
      return isSetP_uuid();
    case P_LOC:
      return isSetP_loc();
    case V_UUID:
      return isSetV_uuid();
    case V_LOC:
      return isSetV_loc();
    case UTC_TX:
      return isSetUtc_tx();
    case UTC_RX:
      return isSetUtc_rx();
    case SEQUENCE_NUM:
      return isSetSequence_num();
    case OP:
      return isSetOp();
    case ARGV:
      return isSetArgv();
    case D_CONTEXT:
      return isSetD_context();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Fact)
      return this.equals((Fact)that);
    return false;
  }

  public boolean equals(Fact that) {
    if (that == null)
      return false;

    boolean this_present_developer_key = true && this.isSetDeveloper_key();
    boolean that_present_developer_key = true && that.isSetDeveloper_key();
    if (this_present_developer_key || that_present_developer_key) {
      if (!(this_present_developer_key && that_present_developer_key))
        return false;
      if (!this.developer_key.equals(that.developer_key))
        return false;
    }

    boolean this_present_application_key = true && this.isSetApplication_key();
    boolean that_present_application_key = true && that.isSetApplication_key();
    if (this_present_application_key || that_present_application_key) {
      if (!(this_present_application_key && that_present_application_key))
        return false;
      if (!this.application_key.equals(that.application_key))
        return false;
    }

    boolean this_present_p_uuid = true && this.isSetP_uuid();
    boolean that_present_p_uuid = true && that.isSetP_uuid();
    if (this_present_p_uuid || that_present_p_uuid) {
      if (!(this_present_p_uuid && that_present_p_uuid))
        return false;
      if (!this.p_uuid.equals(that.p_uuid))
        return false;
    }

    boolean this_present_p_loc = true && this.isSetP_loc();
    boolean that_present_p_loc = true && that.isSetP_loc();
    if (this_present_p_loc || that_present_p_loc) {
      if (!(this_present_p_loc && that_present_p_loc))
        return false;
      if (!this.p_loc.equals(that.p_loc))
        return false;
    }

    boolean this_present_v_uuid = true && this.isSetV_uuid();
    boolean that_present_v_uuid = true && that.isSetV_uuid();
    if (this_present_v_uuid || that_present_v_uuid) {
      if (!(this_present_v_uuid && that_present_v_uuid))
        return false;
      if (!this.v_uuid.equals(that.v_uuid))
        return false;
    }

    boolean this_present_v_loc = true && this.isSetV_loc();
    boolean that_present_v_loc = true && that.isSetV_loc();
    if (this_present_v_loc || that_present_v_loc) {
      if (!(this_present_v_loc && that_present_v_loc))
        return false;
      if (!this.v_loc.equals(that.v_loc))
        return false;
    }

    boolean this_present_utc_tx = true;
    boolean that_present_utc_tx = true;
    if (this_present_utc_tx || that_present_utc_tx) {
      if (!(this_present_utc_tx && that_present_utc_tx))
        return false;
      if (this.utc_tx != that.utc_tx)
        return false;
    }

    boolean this_present_utc_rx = true && this.isSetUtc_rx();
    boolean that_present_utc_rx = true && that.isSetUtc_rx();
    if (this_present_utc_rx || that_present_utc_rx) {
      if (!(this_present_utc_rx && that_present_utc_rx))
        return false;
      if (this.utc_rx != that.utc_rx)
        return false;
    }

    boolean this_present_sequence_num = true;
    boolean that_present_sequence_num = true;
    if (this_present_sequence_num || that_present_sequence_num) {
      if (!(this_present_sequence_num && that_present_sequence_num))
        return false;
      if (this.sequence_num != that.sequence_num)
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_argv = true && this.isSetArgv();
    boolean that_present_argv = true && that.isSetArgv();
    if (this_present_argv || that_present_argv) {
      if (!(this_present_argv && that_present_argv))
        return false;
      if (!this.argv.equals(that.argv))
        return false;
    }

    boolean this_present_d_context = true && this.isSetD_context();
    boolean that_present_d_context = true && that.isSetD_context();
    if (this_present_d_context || that_present_d_context) {
      if (!(this_present_d_context && that_present_d_context))
        return false;
      if (!this.d_context.equals(that.d_context))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_developer_key = true && (isSetDeveloper_key());
    builder.append(present_developer_key);
    if (present_developer_key)
      builder.append(developer_key);

    boolean present_application_key = true && (isSetApplication_key());
    builder.append(present_application_key);
    if (present_application_key)
      builder.append(application_key);

    boolean present_p_uuid = true && (isSetP_uuid());
    builder.append(present_p_uuid);
    if (present_p_uuid)
      builder.append(p_uuid);

    boolean present_p_loc = true && (isSetP_loc());
    builder.append(present_p_loc);
    if (present_p_loc)
      builder.append(p_loc);

    boolean present_v_uuid = true && (isSetV_uuid());
    builder.append(present_v_uuid);
    if (present_v_uuid)
      builder.append(v_uuid);

    boolean present_v_loc = true && (isSetV_loc());
    builder.append(present_v_loc);
    if (present_v_loc)
      builder.append(v_loc);

    boolean present_utc_tx = true;
    builder.append(present_utc_tx);
    if (present_utc_tx)
      builder.append(utc_tx);

    boolean present_utc_rx = true && (isSetUtc_rx());
    builder.append(present_utc_rx);
    if (present_utc_rx)
      builder.append(utc_rx);

    boolean present_sequence_num = true;
    builder.append(present_sequence_num);
    if (present_sequence_num)
      builder.append(sequence_num);

    boolean present_op = true && (isSetOp());
    builder.append(present_op);
    if (present_op)
      builder.append(op.getValue());

    boolean present_argv = true && (isSetArgv());
    builder.append(present_argv);
    if (present_argv)
      builder.append(argv);

    boolean present_d_context = true && (isSetD_context());
    builder.append(present_d_context);
    if (present_d_context)
      builder.append(d_context);

    return builder.toHashCode();
  }

  public int compareTo(Fact other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Fact typedOther = (Fact)other;

    lastComparison = Boolean.valueOf(isSetDeveloper_key()).compareTo(typedOther.isSetDeveloper_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeveloper_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.developer_key, typedOther.developer_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplication_key()).compareTo(typedOther.isSetApplication_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplication_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.application_key, typedOther.application_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP_uuid()).compareTo(typedOther.isSetP_uuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP_uuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_uuid, typedOther.p_uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP_loc()).compareTo(typedOther.isSetP_loc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP_loc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_loc, typedOther.p_loc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetV_uuid()).compareTo(typedOther.isSetV_uuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_uuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_uuid, typedOther.v_uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetV_loc()).compareTo(typedOther.isSetV_loc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_loc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_loc, typedOther.v_loc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtc_tx()).compareTo(typedOther.isSetUtc_tx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtc_tx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utc_tx, typedOther.utc_tx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtc_rx()).compareTo(typedOther.isSetUtc_rx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtc_rx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utc_rx, typedOther.utc_rx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence_num()).compareTo(typedOther.isSetSequence_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence_num, typedOther.sequence_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(typedOther.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, typedOther.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgv()).compareTo(typedOther.isSetArgv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argv, typedOther.argv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD_context()).compareTo(typedOther.isSetD_context());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_context()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_context, typedOther.d_context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Fact(");
    boolean first = true;

    sb.append("developer_key:");
    if (this.developer_key == null) {
      sb.append("null");
    } else {
      sb.append(this.developer_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("application_key:");
    if (this.application_key == null) {
      sb.append("null");
    } else {
      sb.append(this.application_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p_uuid:");
    if (this.p_uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.p_uuid);
    }
    first = false;
    if (isSetP_loc()) {
      if (!first) sb.append(", ");
      sb.append("p_loc:");
      if (this.p_loc == null) {
        sb.append("null");
      } else {
        sb.append(this.p_loc);
      }
      first = false;
    }
    if (isSetV_uuid()) {
      if (!first) sb.append(", ");
      sb.append("v_uuid:");
      if (this.v_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.v_uuid);
      }
      first = false;
    }
    if (isSetV_loc()) {
      if (!first) sb.append(", ");
      sb.append("v_loc:");
      if (this.v_loc == null) {
        sb.append("null");
      } else {
        sb.append(this.v_loc);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("utc_tx:");
    sb.append(this.utc_tx);
    first = false;
    if (isSetUtc_rx()) {
      if (!first) sb.append(", ");
      sb.append("utc_rx:");
      sb.append(this.utc_rx);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sequence_num:");
    sb.append(this.sequence_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argv:");
    if (this.argv == null) {
      sb.append("null");
    } else {
      sb.append(this.argv);
    }
    first = false;
    if (isSetD_context()) {
      if (!first) sb.append(", ");
      sb.append("d_context:");
      if (this.d_context == null) {
        sb.append("null");
      } else {
        sb.append(this.d_context);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDeveloper_key()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'developer_key' is unset! Struct:" + toString());
    }

    if (!isSetApplication_key()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'application_key' is unset! Struct:" + toString());
    }

    if (!isSetP_uuid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'p_uuid' is unset! Struct:" + toString());
    }

    if (!isSetUtc_tx()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'utc_tx' is unset! Struct:" + toString());
    }

    if (!isSetSequence_num()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequence_num' is unset! Struct:" + toString());
    }

    if (!isSetOp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'op' is unset! Struct:" + toString());
    }

    if (!isSetArgv()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argv' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FactStandardSchemeFactory implements SchemeFactory {
    public FactStandardScheme getScheme() {
      return new FactStandardScheme();
    }
  }

  private static class FactStandardScheme extends StandardScheme<Fact> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Fact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVELOPER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.developer_key = iprot.readString();
              struct.setDeveloper_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.application_key = iprot.readString();
              struct.setApplication_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // P_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p_uuid = iprot.readString();
              struct.setP_uuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // P_LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.p_loc = new PhysicalLocation();
              struct.p_loc.read(iprot);
              struct.setP_locIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // V_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.v_uuid = iprot.readString();
              struct.setV_uuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // V_LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.v_loc = new VirtualLocation();
              struct.v_loc.read(iprot);
              struct.setV_locIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UTC_TX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.utc_tx = iprot.readI64();
              struct.setUtc_txIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UTC_RX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.utc_rx = iprot.readI64();
              struct.setUtc_rxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SEQUENCE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence_num = iprot.readI32();
              struct.setSequence_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = Operation.findByValue(iprot.readI32());
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ARGV
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.argv = new ArrayList<String>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  String _elem12; // required
                  _elem12 = iprot.readString();
                  struct.argv.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setArgvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // D_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.d_context = new DeviceContext();
              struct.d_context.read(iprot);
              struct.setD_contextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Fact struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.developer_key != null) {
        oprot.writeFieldBegin(DEVELOPER_KEY_FIELD_DESC);
        oprot.writeString(struct.developer_key);
        oprot.writeFieldEnd();
      }
      if (struct.application_key != null) {
        oprot.writeFieldBegin(APPLICATION_KEY_FIELD_DESC);
        oprot.writeString(struct.application_key);
        oprot.writeFieldEnd();
      }
      if (struct.p_uuid != null) {
        oprot.writeFieldBegin(P_UUID_FIELD_DESC);
        oprot.writeString(struct.p_uuid);
        oprot.writeFieldEnd();
      }
      if (struct.p_loc != null) {
        if (struct.isSetP_loc()) {
          oprot.writeFieldBegin(P_LOC_FIELD_DESC);
          struct.p_loc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.v_uuid != null) {
        if (struct.isSetV_uuid()) {
          oprot.writeFieldBegin(V_UUID_FIELD_DESC);
          oprot.writeString(struct.v_uuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.v_loc != null) {
        if (struct.isSetV_loc()) {
          oprot.writeFieldBegin(V_LOC_FIELD_DESC);
          struct.v_loc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(UTC_TX_FIELD_DESC);
      oprot.writeI64(struct.utc_tx);
      oprot.writeFieldEnd();
      if (struct.isSetUtc_rx()) {
        oprot.writeFieldBegin(UTC_RX_FIELD_DESC);
        oprot.writeI64(struct.utc_rx);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(struct.sequence_num);
      oprot.writeFieldEnd();
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeI32(struct.op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.argv != null) {
        oprot.writeFieldBegin(ARGV_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.argv.size()));
          for (String _iter13 : struct.argv)
          {
            oprot.writeString(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.d_context != null) {
        if (struct.isSetD_context()) {
          oprot.writeFieldBegin(D_CONTEXT_FIELD_DESC);
          struct.d_context.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FactTupleSchemeFactory implements SchemeFactory {
    public FactTupleScheme getScheme() {
      return new FactTupleScheme();
    }
  }

  private static class FactTupleScheme extends TupleScheme<Fact> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Fact struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.developer_key);
      oprot.writeString(struct.application_key);
      oprot.writeString(struct.p_uuid);
      oprot.writeI64(struct.utc_tx);
      oprot.writeI32(struct.sequence_num);
      oprot.writeI32(struct.op.getValue());
      {
        oprot.writeI32(struct.argv.size());
        for (String _iter14 : struct.argv)
        {
          oprot.writeString(_iter14);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetP_loc()) {
        optionals.set(0);
      }
      if (struct.isSetV_uuid()) {
        optionals.set(1);
      }
      if (struct.isSetV_loc()) {
        optionals.set(2);
      }
      if (struct.isSetUtc_rx()) {
        optionals.set(3);
      }
      if (struct.isSetD_context()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetP_loc()) {
        struct.p_loc.write(oprot);
      }
      if (struct.isSetV_uuid()) {
        oprot.writeString(struct.v_uuid);
      }
      if (struct.isSetV_loc()) {
        struct.v_loc.write(oprot);
      }
      if (struct.isSetUtc_rx()) {
        oprot.writeI64(struct.utc_rx);
      }
      if (struct.isSetD_context()) {
        struct.d_context.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Fact struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.developer_key = iprot.readString();
      struct.setDeveloper_keyIsSet(true);
      struct.application_key = iprot.readString();
      struct.setApplication_keyIsSet(true);
      struct.p_uuid = iprot.readString();
      struct.setP_uuidIsSet(true);
      struct.utc_tx = iprot.readI64();
      struct.setUtc_txIsSet(true);
      struct.sequence_num = iprot.readI32();
      struct.setSequence_numIsSet(true);
      struct.op = Operation.findByValue(iprot.readI32());
      struct.setOpIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.argv = new ArrayList<String>(_list15.size);
        for (int _i16 = 0; _i16 < _list15.size; ++_i16)
        {
          String _elem17; // required
          _elem17 = iprot.readString();
          struct.argv.add(_elem17);
        }
      }
      struct.setArgvIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.p_loc = new PhysicalLocation();
        struct.p_loc.read(iprot);
        struct.setP_locIsSet(true);
      }
      if (incoming.get(1)) {
        struct.v_uuid = iprot.readString();
        struct.setV_uuidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.v_loc = new VirtualLocation();
        struct.v_loc.read(iprot);
        struct.setV_locIsSet(true);
      }
      if (incoming.get(3)) {
        struct.utc_rx = iprot.readI64();
        struct.setUtc_rxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.d_context = new DeviceContext();
        struct.d_context.read(iprot);
        struct.setD_contextIsSet(true);
      }
    }
  }

}

