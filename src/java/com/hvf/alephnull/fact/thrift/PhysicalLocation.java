/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hvf.alephnull.fact.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PhysicalLocation implements org.apache.thrift.TBase<PhysicalLocation, PhysicalLocation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PhysicalLocation");

  private static final org.apache.thrift.protocol.TField LATTITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("lattitude", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PhysicalLocationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PhysicalLocationTupleSchemeFactory());
  }

  private double lattitude; // required
  private double longitude; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LATTITUDE((short)1, "lattitude"),
    LONGITUDE((short)2, "longitude");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LATTITUDE
          return LATTITUDE;
        case 2: // LONGITUDE
          return LONGITUDE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LATTITUDE_ISSET_ID = 0;
  private static final int __LONGITUDE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LATTITUDE, new org.apache.thrift.meta_data.FieldMetaData("lattitude", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PhysicalLocation.class, metaDataMap);
  }

  public PhysicalLocation() {
  }

  public PhysicalLocation(
    double lattitude,
    double longitude)
  {
    this();
    this.lattitude = lattitude;
    setLattitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PhysicalLocation(PhysicalLocation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.lattitude = other.lattitude;
    this.longitude = other.longitude;
  }

  public PhysicalLocation deepCopy() {
    return new PhysicalLocation(this);
  }

  @Override
  public void clear() {
    setLattitudeIsSet(false);
    this.lattitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
  }

  public double getLattitude() {
    return this.lattitude;
  }

  public void setLattitude(double lattitude) {
    this.lattitude = lattitude;
    setLattitudeIsSet(true);
  }

  public void unsetLattitude() {
    __isset_bit_vector.clear(__LATTITUDE_ISSET_ID);
  }

  /** Returns true if field lattitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLattitude() {
    return __isset_bit_vector.get(__LATTITUDE_ISSET_ID);
  }

  public void setLattitudeIsSet(boolean value) {
    __isset_bit_vector.set(__LATTITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public void setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
  }

  public void unsetLongitude() {
    __isset_bit_vector.clear(__LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return __isset_bit_vector.get(__LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bit_vector.set(__LONGITUDE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LATTITUDE:
      if (value == null) {
        unsetLattitude();
      } else {
        setLattitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LATTITUDE:
      return Double.valueOf(getLattitude());

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LATTITUDE:
      return isSetLattitude();
    case LONGITUDE:
      return isSetLongitude();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PhysicalLocation)
      return this.equals((PhysicalLocation)that);
    return false;
  }

  public boolean equals(PhysicalLocation that) {
    if (that == null)
      return false;

    boolean this_present_lattitude = true;
    boolean that_present_lattitude = true;
    if (this_present_lattitude || that_present_lattitude) {
      if (!(this_present_lattitude && that_present_lattitude))
        return false;
      if (this.lattitude != that.lattitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_lattitude = true;
    builder.append(present_lattitude);
    if (present_lattitude)
      builder.append(lattitude);

    boolean present_longitude = true;
    builder.append(present_longitude);
    if (present_longitude)
      builder.append(longitude);

    return builder.toHashCode();
  }

  public int compareTo(PhysicalLocation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PhysicalLocation typedOther = (PhysicalLocation)other;

    lastComparison = Boolean.valueOf(isSetLattitude()).compareTo(typedOther.isSetLattitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLattitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lattitude, typedOther.lattitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PhysicalLocation(");
    boolean first = true;

    sb.append("lattitude:");
    sb.append(this.lattitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLattitude()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lattitude' is unset! Struct:" + toString());
    }

    if (!isSetLongitude()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'longitude' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PhysicalLocationStandardSchemeFactory implements SchemeFactory {
    public PhysicalLocationStandardScheme getScheme() {
      return new PhysicalLocationStandardScheme();
    }
  }

  private static class PhysicalLocationStandardScheme extends StandardScheme<PhysicalLocation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PhysicalLocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LATTITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lattitude = iprot.readDouble();
              struct.setLattitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PhysicalLocation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LATTITUDE_FIELD_DESC);
      oprot.writeDouble(struct.lattitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PhysicalLocationTupleSchemeFactory implements SchemeFactory {
    public PhysicalLocationTupleScheme getScheme() {
      return new PhysicalLocationTupleScheme();
    }
  }

  private static class PhysicalLocationTupleScheme extends TupleScheme<PhysicalLocation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PhysicalLocation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.lattitude);
      oprot.writeDouble(struct.longitude);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PhysicalLocation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lattitude = iprot.readDouble();
      struct.setLattitudeIsSet(true);
      struct.longitude = iprot.readDouble();
      struct.setLongitudeIsSet(true);
    }
  }

}

